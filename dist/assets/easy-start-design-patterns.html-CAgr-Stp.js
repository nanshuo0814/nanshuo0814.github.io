import{_ as r,c as n,a as s,o}from"./app-Dg9SiWZ9.js";const e={};function g(a,t){return o(),n("div",null,t[0]||(t[0]=[s('<h1 id="什么是设计模式" tabindex="-1"><a class="header-anchor" href="#什么是设计模式"><span>什么是设计模式</span></a></h1><p>设计模式是在软件开发中，经过实践总结出来的<strong>可重复使用的、针对特定问题</strong>的解决方案的模板。它对软件设计中常见的问题进行了<strong>抽象和概括</strong>，提供了一种标准化的设计<strong>思路和方法</strong>，以<strong>提高软件的质量、可维护性、可扩展性和可复用性</strong>。简单来说，设计模式是一种编程中的<strong>经验总结和最佳实践</strong>。</p><h1 id="设计模式的优点" tabindex="-1"><a class="header-anchor" href="#设计模式的优点"><span>设计模式的优点</span></a></h1><ul><li><strong>提高代码质量</strong>：使代码结构更加清晰、合理和健壮。</li><li><strong>增强可读性和可理解性</strong>：遵循特定模式的代码更容易被其他人理解和掌握。</li><li><strong>促进代码复用</strong>：减少重复代码的编写，提高开发效率。</li><li><strong>提高系统的灵活性和可扩展性</strong>：可以方便地进行功能扩展和修改，而对其他部分影响较小。</li><li><strong>增强系统的稳定性</strong>：经过实践验证的模式有助于避免一些常见的错误和问题。</li><li><strong>便于团队协作</strong>：团队成员对设计模式有共同的认知，便于沟通和协作。</li><li><strong>提升软件的可维护性</strong>：使代码更易于维护和更新。</li></ul><h1 id="设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式的六大原则"><span>设计模式的六大原则</span></a></h1><ol><li><strong>单一职责原则</strong>：一个类应该只有一个引起它变化的原因，即一个类只负责一项职责。</li><li><strong>开放-封闭原则</strong>：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。</li><li><strong>里氏替换原则</strong>：在任何使用父类的地方都可以用其子类来替换。</li><li><strong>依赖倒置原则</strong>：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</li><li><strong>接口隔离原则</strong>：客户端不应该被迫依赖于它不使用的接口。</li><li><strong>迪米特法则</strong>：一个对象应该对其他对象保持最少的了解。</li></ol><h1 id="设计模式的三种类型" tabindex="-1"><a class="header-anchor" href="#设计模式的三种类型"><span>设计模式的三种类型</span></a></h1><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span>创建型模式</span></a></h2><p>创建型模式是设计模式中的一类，它主要<strong>关注对象的创建机制</strong>。<br> 创建型模式的核心在于将对象的创建过程进行<strong>抽象和封装</strong>，使得系统在创建对象时<strong>更加灵活、高效且可维护</strong>。这些模式提供了不同的方式来实例化对象，以适应各种不同的场景和需求。 它们可以帮助解决对象创建过程中的一些常见问题，比如如何避免对象创建的代码重复、如何根据不同的条件创建不同类型的对象、如何更好地控制对象创建的细节和时机等。通过使用创建型模式，能够使软件的架构更加清晰合理，提高代码的<strong>可扩展性和可复用性</strong>。常见的创建型模式包括<strong>单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式</strong>等。<br><strong>记忆口诀</strong>：创原工抽建单（<strong>创员工抽检单</strong>）<br> 解释：创（创建型模式）原（原型模式）工（工厂模式）抽（抽象工厂模式）建（建造者模式）单（单例模式）</p><table><thead><tr><th>创建型模式</th><th>描述</th></tr></thead><tbody><tr><td>单例模式</td><td>确保<strong>一个类只有一个实例</strong>，并提供一个全局访问点。</td></tr><tr><td>工厂模式</td><td>定义一个用于创建对象的接口，让子类决定实例化哪一个类</td></tr><tr><td>抽象工厂模式</td><td>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</td></tr><tr><td>原型模式</td><td>将一个<strong>对象作为原型</strong>，通过对其<strong>进行复制而克隆</strong>出多个和原型类似的新实例</td></tr><tr><td>建造者模式</td><td>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，<strong>可简单理解为对复杂 对象进行分模块构建</strong></td></tr></tbody></table><h2 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式"><span>结构型模式</span></a></h2><p>结构型模式是设计模式的一类，主要<strong>关注</strong>如何将不同的类和对象组合成更大的<strong>结构</strong>，以<strong>实现</strong>特定的<strong>功能和架构</strong>。 它侧重于处理<strong>类和对象</strong>之间的<strong>组合关系</strong>，通过合理的结构设计来增强系统的<strong>灵活性、可扩展性和可维护性</strong>。这些模式帮助解决在构建复杂系统时，不同组件之间如何更好地协同工作、如何构建更清晰合理的层次结构等问题。 例如，适配器模式解决了不兼容接口之间的适配问题；组合模式构建了层次化的组合结构；桥接模式分离了抽象与实现等。结构型模式使得系统在面对变化和扩展时，能够更从容地进行调整和重构，保持系统的<strong>稳定性和健壮性</strong>。<br><strong>记忆口诀</strong>：结享桥装，适代外组（<strong>姐想乔装，试戴崴足</strong>）<br> 解释：结（结构型模式）享（享元模式）桥（桥接模式）装（装饰器模式），适（适配器模式）代（代理模式）外（外观模式）组（组合模式）</p><table><thead><tr><th>结构型模式</th><th>描述</th></tr></thead><tbody><tr><td>适配器模式</td><td>使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，将一个类的<strong>接口转换</strong>成客户希望的另外一个接口</td></tr><tr><td>桥接模式</td><td>将<strong>抽象部分</strong>与它的<strong>实现部分分离</strong>，使它们都可以<strong>独立地变化</strong></td></tr><tr><td>组合模式</td><td>将对象组合成树形结构以表示“<strong>部分-整体</strong>”的层次结构。</td></tr><tr><td>装饰器模式</td><td><strong>动态</strong>地给一个<strong>对象添加</strong>一些<strong>额外的职责</strong></td></tr><tr><td>外观模式</td><td>为复杂的子系统<strong>提供一个简单统一的接口</strong>，隐藏了子系统内部的复杂性，让客户端与子系统的交互变得更简单和直接</td></tr><tr><td>享元模式</td><td>运用共享技术有效地<strong>支持大量细粒度的对象</strong></td></tr><tr><td>代理模式</td><td>为其他对象<strong>提供</strong>一种<strong>代理</strong>以<strong>控制</strong>对这个<strong>对象的访问</strong>，从而限制、增强或修改该对象的一些特性</td></tr></tbody></table><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式"><span>行为型模式</span></a></h2><p>行为型模式是设计模式中的一类，主要关注<strong>对象之间的交互和职责分配</strong>。<br> 行为型模式侧重于描述对象在运行时的行为以及它们之间如何<strong>协作、通信和完成特定任务</strong>。这些模式帮助解决在复杂系统中对象之间的动态交互问题，使得系统的行为更加灵活、可扩展和易于理解。 常见的行为型模式包括<strong>策略模式、模板方法模式、观察者模式、迭代器模式、命令模式、状态模式、中介者模式、备忘录模式、责任链模式、解释器模式、访问者模式</strong>等。它们通过定义明确的<strong>行为规则和交互方式</strong>，来优化系统中对象的行为表现，提高系统的整体质量和可维护性。<br><strong>记忆口诀</strong>：行责命迭状中，备解观策模访（<strong>行者鸣笛撞钟，八戒观测模仿</strong>）<br> 解释：行（行为型模式）责（责任链模式）命（命令模式）迭（迭代器模式）状（状态模式）中（中介者模式）备（备忘录模式）解（解释器模式）观（观察者模式）策（策略模式）模（模板方法模式）访（访问者模式）</p><table><thead><tr><th>行为型模式</th><th>描述</th></tr></thead><tbody><tr><td>策略模式</td><td>定义一系列算法，将每个算法<strong>封装</strong>起来，并让它们可以<strong>相互替换</strong>，<strong>同一功能的不同实现</strong></td></tr><tr><td>模板方法模式</td><td>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得<strong>子类可以不改变该算法结构的情况下重定义该算法</strong>的某些特定步骤</td></tr><tr><td>观察者模式</td><td>定义对象间的一种<strong>一对多的依赖关系</strong>，当<strong>一个对象</strong>状态<strong>发生改变</strong>时，所有<strong>依赖</strong>它的对象都得到<strong>通知并自动更新</strong>，常见的是：<strong>发布-订阅</strong></td></tr><tr><td>迭代器模式</td><td>提供一种方法**顺序访问（遍历）**一个聚合对象中各个元素，而又不需暴露该对象的内部表示</td></tr><tr><td>命令模式</td><td>将一个<strong>请求封装为一个对象</strong>，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作</td></tr><tr><td>状态模式</td><td>允许一个对象在其内部状态改变时改变它的行为，常见场景为：<strong>一个对象的行为取决于它的状态</strong></td></tr><tr><td>备忘录模式</td><td>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该<strong>对象之外保存这个状态</strong>，以便以后<strong>恢复</strong>到这一状态，<strong>撤销-恢复</strong></td></tr><tr><td>中介者模式</td><td>定义一个<strong>中介对象</strong>来<strong>简化原有对象</strong>之间的<strong>交互关系</strong>，降低系统中对象间的耦合度，使<strong>原有对象</strong>之间<strong>不必相互了解</strong></td></tr><tr><td>解释器模式</td><td>给定一个语言，定义它的<strong>文法</strong>的一种表示，并定义一个解释器，这个<strong>解释器使用该表示来解释语言中的句子</strong></td></tr><tr><td>责任链模式</td><td>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些<strong>对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</strong></td></tr><tr><td>访问者模式</td><td>在不改变数据结构元素的前提下，<strong>为一个数据结构中的每个元素提供多种访问方式</strong></td></tr></tbody></table>',16)]))}const i=r(e,[["render",g],["__file","easy-start-design-patterns.html.vue"]]),l=JSON.parse('{"path":"/article/easy-start-design-patterns.html","title":"一文带你简单入门了解设计模式","lang":"zh-CN","frontmatter":{"title":"一文带你简单入门了解设计模式","date":"2024-05-17T15:51:30.000Z","cover":"https://ypycdn.nanshuo.icu/posts/shejimoshi/sjmsfm.png","excerpt":"本文介绍了设计模式的定义、优点和六大原则，阐述了创建型、结构型和行为型三种类型的设计模式，包括其含义和适用场景，并给出了记忆口诀","isOriginal":true,"star":true,"category":["设计模式"],"tag":["设计模式","结构型模式","行为型模式","创建型模式"],"description":"什么是设计模式 设计模式是在软件开发中，经过实践总结出来的可重复使用的、针对特定问题的解决方案的模板。它对软件设计中常见的问题进行了抽象和概括，提供了一种标准化的设计思路和方法，以提高软件的质量、可维护性、可扩展性和可复用性。简单来说，设计模式是一种编程中的经验总结和最佳实践。 设计模式的优点 提高代码质量：使代码结构更加清晰、合理和健壮。 增强可读性...","head":[["meta",{"property":"og:url","content":"https://nanshuo.icu/article/easy-start-design-patterns.html"}],["meta",{"property":"og:site_name","content":"烁烁南光"}],["meta",{"property":"og:title","content":"一文带你简单入门了解设计模式"}],["meta",{"property":"og:description","content":"什么是设计模式 设计模式是在软件开发中，经过实践总结出来的可重复使用的、针对特定问题的解决方案的模板。它对软件设计中常见的问题进行了抽象和概括，提供了一种标准化的设计思路和方法，以提高软件的质量、可维护性、可扩展性和可复用性。简单来说，设计模式是一种编程中的经验总结和最佳实践。 设计模式的优点 提高代码质量：使代码结构更加清晰、合理和健壮。 增强可读性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ypycdn.nanshuo.icu/posts/shejimoshi/sjmsfm.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T16:21:37.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://ypycdn.nanshuo.icu/posts/shejimoshi/sjmsfm.png"}],["meta",{"name":"twitter:image:alt","content":"一文带你简单入门了解设计模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"结构型模式"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2024-05-17T15:51:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-25T16:21:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一文带你简单入门了解设计模式\\",\\"image\\":[\\"https://ypycdn.nanshuo.icu/posts/shejimoshi/sjmsfm.png\\"],\\"datePublished\\":\\"2024-05-17T15:51:30.000Z\\",\\"dateModified\\":\\"2024-10-25T16:21:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"南烁\\",\\"url\\":\\"https://nanshuo.icu/article/\\",\\"email\\":\\"nanshuo.icu@qq.com\\"}]}"]]},"headers":[{"level":1,"title":"什么是设计模式","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":1,"title":"设计模式的优点","slug":"设计模式的优点","link":"#设计模式的优点","children":[]},{"level":1,"title":"设计模式的六大原则","slug":"设计模式的六大原则","link":"#设计模式的六大原则","children":[]},{"level":1,"title":"设计模式的三种类型","slug":"设计模式的三种类型","link":"#设计模式的三种类型","children":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}]}],"git":{"createdTime":1729873297000,"updatedTime":1729873297000,"contributors":[{"name":"南烁","email":"nanshuo.icu@qq.com","commits":1}]},"readingTime":{"minutes":8.68,"words":2603},"filePathRelative":"article/easy-start-design-patterns.md","localizedDate":"2024年5月17日","autoDesc":true}');export{i as comp,l as data};
